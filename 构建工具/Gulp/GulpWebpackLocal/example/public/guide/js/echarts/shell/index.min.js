/**
	* maotianyuan modified this file at 2018-8-9 10:27:38 
*/
/*! lastmodify: 2018-8-9 10:30:08 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "D:/AWork/BmwCTO/example/public/guide/js/echarts/shell";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck2 = __webpack_require__(1);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _util = __webpack_require__(2);

	var _util2 = _interopRequireDefault(_util);

	var _lineBar = __webpack_require__(3);

	var _lineBar2 = _interopRequireDefault(_lineBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * 页面中的ajax请求路由 集合
	 */
	var urlConfig = {
		indexReport: '/bi/joyIndexSecond'
	};

	var EcharIndex = function () {
		function EcharIndex() {
			(0, _classCallCheck3['default'])(this, EcharIndex);

			$('#asideUl .echarts-shell').asideSet();
			this.getLineBar();
		}

		EcharIndex.prototype.getLineBar = function getLineBar() {
			var lineBar = new _lineBar2['default']();
			lineBar.createEchar({
				id: 'lineBar_1',
				myValue: [40, 60, 29, 70, 100], //矩形数值
				name: '提示描述信息',
				lineColor: '#C4C9D3',
				rectColor: ['#7091C4', '#5170A2', '#A6A6A6', '#C4C9D3', '#3FA7DC'], //矩形颜色
				rectHeight: 24, //矩形高度
				step: 12, //矩形上线间距
				lineWidth: 2, //连线宽度
				originX: 180, //距离左上 0 0 x的距离
				originY: 50 //距离画布左上0 0 y的距离
			});
		};

		return EcharIndex;
	}();

	$(function () {
		new EcharIndex();
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	/**
	 * 工具类集合
	 */

	/**
	 * 通过webpack打包 可获得 全局公共参数
	 */
	console.log(({"NODE_ENV":"development"}));

	var util = {
	    /**
	       * 公共AJAX
	       * @param opts
	       * @returns {*}
	       */
	    easyAjax: function easyAjax(opts) {
	        var _that = this;
	        if (true) {
	            opts.url = '/mockApi/' + opts.url;
	        } else {
	            // opts.url = opts.url.replace(/mockApi\/|localApi\//i,'')
	        }
	        var define = {
	            type: 'POST',
	            url: '',
	            scriptCharset: "utf-8",
	            dataType: 'json',
	            data: {},
	            async: false,
	            cache: false,
	            // processData: false,
	            // contentType: false,
	            statusCode: {
	                500: function _(res, textStatus, err) {
	                    layer.msg("操作失败，服务器出现异常！", { time: 1500, icon: 2 });
	                }
	            },
	            beforeSend: function beforeSend(data, xhr) {
	                // _that.getToken();
	                // console.log(xhr);
	                // console.log(xhr.data);
	                // console.log(data);
	            },
	            success: function success(data) {},
	            error: function error(sta, xhr, thrown) {
	                var isIE = navigator.userAgent;
	                if (isIE.indexOf('MSIE') < 0) {
	                    console.log(sta);
	                    console.log(xhr);
	                    console.log(thrown);
	                }
	            }
	        };
	        $.extend(define, opts);
	        return $.ajax(define);
	    },

	    /**
	     * 公共url地址获取
	     * @param url
	     * @returns {{}}
	     */
	    paraseUrl: function paraseUrl(url) {
	        var pattern = /(\w+)=([^\#&]*)/ig;
	        var parames = {};
	        url.replace(pattern, function (attr, key, value) {
	            parames[key] = decodeURI(value);
	        });
	        return parames;
	    },
	    getYear: function getYear() {
	        return new Date().getFullYear();
	    }
	};
	exports['default'] = util;
	module.exports = exports['default'];

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = undefined;

	var _classCallCheck2 = __webpack_require__(1);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var LineBar = function () {
		function LineBar() {
			(0, _classCallCheck3['default'])(this, LineBar);

			this.myChart = {};
		}

		LineBar.prototype.createEchar = function createEchar() {
			var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

			var dom = document.getElementById(obj.id || '');
			this.myChart = echarts.init(dom);
			this.drowEchar(obj);
		};

		LineBar.prototype.drowEchar = function drowEchar(obj) {
			var myValue = obj.myValue,
			    name = obj.name,
			    lineColor = obj.lineColor,
			    rectColor = obj.rectColor,
			    rectHeight = obj.rectHeight,
			    step = obj.step,
			    lineWidth = obj.lineWidth,
			    originX = obj.originX,
			    originY = obj.originY;

			// var myValue = [40, 60, 29, 70, 100] //矩形数值
			// var name = '提示描述信息'
			// var lineColor = '#C4C9D3'
			// var rectColor = ['#7091C4', '#5170A2', '#A6A6A6', '#C4C9D3', '#3FA7DC'] //矩形颜色
			// var rectHeight = 24 //矩形高度
			// var step = 12 //矩形上线间距
			// var lineWidth = 2 //连线宽度
			// var originX = 180; //距离左上 0 0 x的距离
			// var originY = 50; //距离画布左上0 0 y的距离

			var rectValue = []; //[[0,10],[0,80]...]
			var lineValue = []; //[[0,20,29,30],[0,20,29,30],[...],...]

			var maxValue = Math.max.apply(Math, myValue);
			var heightStep = rectHeight + step;

			myValue.map(function (item) {
				rectValue.push([0, item]);
			});
			var rectData = []; // [[x,y,width],]
			rectValue.forEach(function (item, index) {
				var i = (maxValue - item[1]) / 2;
				var j = heightStep * index;
				rectData.push([i, j, item[1]]);
			});

			var tempArr = [];
			myValue.map(function (item, index) {
				var a = [[maxValue - item] / 2, heightStep * index];
				var b = [[maxValue - item] / 2 + item, heightStep * index];
				var c = [[maxValue - item] / 2 + item, heightStep * index + rectHeight];
				var d = [[maxValue - item] / 2, heightStep * index + rectHeight];
				var obj = {
					a: a,
					b: b,
					c: c,
					d: d
				};
				tempArr.push([obj]);
			});

			tempArr.map(function (item, index) {
				var len = myValue.length;
				if (index + 1 < len) {
					var nextItem = tempArr[index + 1];
					lineValue.push([item[0].c[0], item[0].c[1], nextItem[0].b[0], nextItem[0].b[1]]);
					lineValue.push([item[0].d[0], item[0].d[1], nextItem[0].a[0], nextItem[0].a[1]]);
				}
			});

			function getLineItem(param, api) {
				var pointx1 = originX + api.size([2, 1])[1] + api.value(0);
				var pointy1 = originY + api.size([2, 1])[1] + api.value(1);
				var pointx2 = originX + api.size([2, 1])[1] + api.value(2);
				var pointy2 = originY + api.size([2, 1])[1] + api.value(3);
				return {
					type: 'line',
					shape: {
						x1: pointx1,
						y1: pointy1,
						x2: pointx2,
						y2: pointy2
					},
					style: api.style({
						fill: null,
						stroke: lineColor,
						lineWidth: lineWidth

					})
				};
			}

			function getRectItem(param, api) {
				var dataIndex = param.dataIndex;
				var pointx = originX + api.size([2, 1])[1] + rectData[dataIndex][0];
				var pointy = originY + api.size([2, 1])[1] + rectData[dataIndex][1];
				var height = api.size([2, 1])[1] + rectHeight;
				var width = api.size([2, 1])[1] + rectData[dataIndex][2];
				var _color = rectColor[dataIndex];

				return {
					type: 'rect',
					shape: {
						x: pointx,
						y: pointy,
						width: width,
						height: height
					},
					style: api.style({
						fill: _color,
						stroke: _color,
						lineWidth: 1
					})
				};
			}

			var option = {

				title: {
					text: 'custom自定义图',
					left: 'center'
				},
				grid: {
					left: '15',
					right: '15',
					bottom: '25'
				},
				tooltip: {
					show: false,
					formatter: function formatter(params) {
						var str = params.seriesName + ':' + params.value[1];
						return str;
					}
				},
				xAxis: {
					//   max:100,
					// type: 'value',
					show: false

				},
				yAxis: {
					// max:100,
					show: false
					// type: 'value',
				},
				series: [{
					type: 'custom',
					name: name,
					renderItem: getLineItem,
					data: lineValue
				}, {
					type: 'custom',
					name: name,
					label: {
						normal: {
							show: true,
							color: '#fff',
							fontSize: 12,
							position: 'inside'
						}
					},
					renderItem: getRectItem,
					data: rectValue
				}]
			};

			this.myChart.setOption(option);
		};

		return LineBar;
	}();

	exports['default'] = LineBar;
	module.exports = exports['default'];

/***/ })
/******/ ]);